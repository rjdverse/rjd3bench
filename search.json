[{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"methods implemented package rjd3bench intend bridge gap lack high frequency time series temporal /contemporaneous inconsistencies high frequency series corresponding low frequency series, latter benchmark. Although can issue fields research dealing time series, methods temporal disaggregation, benchmarking, reconciliation calendarization mostly used official statistics, especially production macroeconomic statistics. example, National Accounts often compiled according two frequencies production: annual series, low frequency data, based precise detailed sources quarterly series, high frequency data, usually rely less accurate sources give information timelier basis. use temporal disaggregation, benchmarking, reconciliation calendarization methods allow achieve consistency annual quarterly national accounts time. package R interface highly efficient algorithms modeling developed official ‘JDemetra+ 3.0’ Seasonal adjustement software. provides wide variety methods intend include suggested ESS guidelines temporal disaggregation, benchmarking reconciliation (Eurostat, 2018).  ","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"illustrate various methods using two sets time series: retail data set contains monthly figures retail activity various categories goods services 1992 2010. qna_data contains list two data sets. first data set ‘B1G_Y_data’ includes three annual benchmark series Belgian annual value added period 2009-2020 chemical industry (CE), construction (FF) transport services (HH). second data set ‘TURN_Q_data’ includes corresponding quarterly indicators (modified) production indicators derived VAT statistics covering period 2009Q1-2021Q4.  ","code":"library(\"rjd3toolkit\") # for **retail** data #>  #> Attaching package: 'rjd3toolkit' #> The following objects are masked from 'package:stats': #>  #>     aggregate, mad data(\"qna_data\") #> Warning in data(\"qna_data\"): data set 'qna_data' not found"},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"application-of-methods","dir":"Articles","previous_headings":"","what":"Application of methods","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"","code":"library(\"rjd3bench\")"},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"chow-lin-fernandez-and-litterman-regression-methods","dir":"Articles","previous_headings":"Application of methods > Temporal disaggregation","what":"Chow-Lin, Fernandez and Litterman regression methods","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"Eurostat (2018) recommends use regression-based models purpose temporal disaggregation. Among , Chow-Lin method variants proposed Fernandez Litterman largely used practice. can called temporaldisaggregation() function rjd3bench package. example code use Fernandez variant method disaggregate annual value added construction sector using quarterly production index indicator. variable td_cl class ‘JD3TempDisagg’ contains important information regression including estimates model coefficients covariance matrix, decomposition disaggregated series information likelihood. exist specific print(), summary() plot() functions objects class ‘JD3TempDisagg’. print() shows fitted model, summary() also shows extra information model likelihood. plot() displays decomposition disaggregated series regression smoothing effect.","code":"Y<-ts(qna_data$B1G_Y_data[, \"B1G_FF\"], frequency=1, start=c(2009, 1)) x<-ts(qna_data$TURN_Q_data[, \"TURN_INDEX_FF\"], frequency=4, start=c(2009, 1)) td_cl<-rjd3bench::temporaldisaggregation(Y, indicators=x, model = \"Rw\") y_cl<-td_cl$estimation$disagg # the disaggregated series summary(td_cl) # example of call to summary()  #>  #> Likelihood statistics  #>  #> Number of observations:  12  #> Number of effective observations:  -1  #> Number of estimated parameters:  1  #> LogLikelihood:  -82.28212  #> Standard error:   #> AIC:  166.5642  #> BIC:  166.9621  #>  #>  #> Model: Rw  #> Regression model  #>          coef      se        t #> var1 27.90617 5.47579 5.096281 plot(td_cl)"},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"model-based-denton","dir":"Articles","previous_headings":"Application of methods > Temporal disaggregation","what":"Model-based Denton","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"Denton method variants usually expressed mathematical terms constrained minimization problem. example, widely used Denton proportional first difference (PFD) method usually expressed follows: \\[ min_{y_t}\\sum^n_{t=2}\\biggl[\\frac{y_t}{x_t}-\\frac{y_{t-1}}{x_{t-1}}\\biggr]^2 \\] subject temporal constraint \\[ \\sum_{t} y_t = Y_y \\] \\(y_t\\) value estimate high frequency series period t, \\(x_t\\) value high frequency indicator period t \\(Y_y\\) value annual low frequency series (benchmark series) period y. Equivalently, Denton PFD method can also expressed statistical model considering following state space representation \\[ \\begin{aligned} y_t &= \\beta_t x_t \\\\ \\beta_{t+1} &= \\beta_t + \\varepsilon_t \\qquad \\varepsilon_t \\sim {\\sf NID}(0, \\sigma^2_{\\varepsilon}) \\end{aligned} \\] annual constraint taken care considering cumulated series \\(y^c_t\\) instead original series \\(y_t\\). Hence, last high frequency period (example, last quarter year) observed corresponds value benchmark. value periods initially defined missing estimated maximum likelihood. alternative representation Denton PFD method interesting allows flexibility model inclusion outliers (level shift Benchmark Indicator ratio) - otherwise induce unintended wave effects - possibility fix BI ratio (therefore also disaggregated) specific periods. Outliers intensity defined changing value ‘innovation variances’. Following principle movement preservation inherent Denton, model-based Denton PFD method constitutes interesting alternative temporal disaggregation, giving thorough analysis data (Benchmark--Indicator (BI) ratio particular) clear strategy extrapolation. Model-based denton can called denton.modelbased() function. example code apply data .  variable td_mbd class ‘JD3MBDenton’ contains information disaggregated series BI ratio well respecting errors making possible construct confidence intervals (see plot() function). exist specific print(), summary() plot() functions objects class ‘JD3MBDenton’. print() shows output available, summary() also shows extra information model likelihood. plot() displays disaggregated series BI ratio together respective 95% confidence interval.","code":"td_mbd<-rjd3bench::denton_modelbased(Y, x, outliers = list(\"2020-01-01\"=100, \"2020-04-01\"=100)) y_mbd<-td_mbd$estimation$disagg plot(td_mbd)"},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"denton-method","dir":"Articles","previous_headings":"Application of methods > Benchmarking","what":"Denton method","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"Denton method relies principle movement preservation. exist variants corresponding different definitions movement preservation: additive first difference (AFD), proportional first difference (PFD), additive second difference (ASD), proportional second difference (PSD), etc. different variants can called denton() function rjd3bench package. examples using table ‘B1G_Y_data’ qna_data: denton() function returns high frequency series benchmarked denton method.","code":"Y<-ts(qna_data$B1G_Y_data[, \"B1G_HH\"], frequency=1, start=c(2009, 1))  y_d1<-rjd3bench::denton(t=Y, nfreq=4) # example of denton PFD without high frequency series  x<-y_d1+rnorm(n=length(y_d1), mean=0, sd=10) y_d2<-rjd3bench::denton(s=x, t=Y, d=2, mul=FALSE) # example of denton ASD. Note that the default is d=1 and mul=T corresponding to denton PFD"},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"growth-rate-preservation-grp-method","dir":"Articles","previous_headings":"Application of methods > Benchmarking","what":"Growth rate preservation (GRP) method","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"method corresponds method Cauley Trager, using solution proposed Di Fonzo Marini. can called grp() function. example use : grp() function returns high frequency series benchmarked grp method.","code":"y_grp<-rjd3bench::grp(s=x, t=Y)"},{"path":"https://rjdemetra.github.io/rjd3bench/articles/rjd3bench.html","id":"cubic-splines","dir":"Articles","previous_headings":"Application of methods > Benchmarking","what":"Cubic splines","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+","text":"Cubic splines piecewise cubic functions linked together way guarantee smoothness data points. Additivity constraints added benchmarking purpose sub-period estimates derived spline. sub-period indicator (disaggregated series) used, cubic splines longer drawn based low frequency data Benchmark--Indicator (BI ratio) one smoothed. Sub-period estimates simply product smoothed high frequency BI ratio indicator. method can called cubicspline() function. examples use : cubicspline() function returns high frequency series benchmarked cubic spline method.","code":"y_cs1<-rjd3bench::cubicspline(t=Y, nfreq=4) # example of cubic spline without high frequency series (smoothing)  x<-y_cs1+rnorm(n=length(y_cs1), mean=0, sd=10) y_cs2<-rjd3bench::cubicspline(s=x, t=Y) # example of cubic spline with a high frequency series to benchmark"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3bench/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jean Palate. Author, maintainer.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Palate J (2024). rjd3bench: Interface 'JDemetra+ 3.0' Seasonal Adjustment Software. R package version 2.0.1,  https://rjdemetra.github.io/rjd3bench/, https://github.com/jdemetra/rjd3sa.","code":"@Manual{,   title = {rjd3bench: Interface to 'JDemetra+ 3.0' Seasonal Adjustment Software},   author = {Jean Palate},   year = {2024},   note = {R package version 2.0.1,  https://rjdemetra.github.io/rjd3bench/},   url = {https://github.com/jdemetra/rjd3sa}, }"},{"path":"https://rjdemetra.github.io/rjd3bench/index.html","id":"rjd3bench","dir":"","previous_headings":"","what":"Interface to JDemetra+ 3.0 Seasonal Adjustment Software","title":"Interface to JDemetra+ 3.0 Seasonal Adjustment Software","text":"Temporal disaggregation benchmarking","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to JDemetra+ 3.0 Seasonal Adjustment Software","text":"get current stable version (latest release): get current development version GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdemetra/rjd3toolkit@*release\") remotes::install_github(\"rjdemetra/rjd3bench@*release\") # install.packages(\"remotes\") remotes::install_github(\"rjdemetra/rjd3bench\")"},{"path":"https://rjdemetra.github.io/rjd3bench/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Interface to JDemetra+ 3.0 Seasonal Adjustment Software","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Interface to JDemetra+ 3.0 Seasonal Adjustment Software","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/adl_disaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — adl_disaggregation","title":"Title — adl_disaggregation","text":"Title","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/adl_disaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — adl_disaggregation","text":"","code":"adl_disaggregation(   series,   constant = TRUE,   trend = FALSE,   indicators = NULL,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   phi = 0,   phi.fixed = FALSE,   phi.truncated = 0,   xar = c(\"FREE\", \"SAME\", \"NONE\") )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/adl_disaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — adl_disaggregation","text":"series  constant  trend  indicators  conversion  conversion.obsposition  phi  phi.fixed  phi.truncated  xar","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/adl_disaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — adl_disaggregation","text":"","code":"# qna data, fernandez with/without quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) td1<-rjd3bench::adl_disaggregation(Y, indicators=x, xar=\"FREE\") td2<-rjd3bench::adl_disaggregation(Y, indicators=x, xar=\"SAME\")"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/calendarization.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendarization — calendarization","title":"Calendarization — calendarization","text":"Based \"Calendarization splines state space models\" B. Quenneville, F.Picard S.Fortier Appl. Statistics (2013) 62, part 3, pp 371-399. State space implementation.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/calendarization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendarization — calendarization","text":"","code":"calendarization(   calendarobs,   freq,   start = NULL,   end = NULL,   dailyweights = NULL,   stde = FALSE )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/calendarization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendarization — calendarization","text":"calendarobs Observations (list start, end, value). See example. freq Annual frequency. 0, daily series computed start Starting day calendarization. calendar obs (extrapolation) end Final day calendarization. calendar obs (extrapolation) dailyweights Daily weights. length requested series stde","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/calendarization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendarization — calendarization","text":"","code":"obs<-list(     list(start=\"1980-01-01\", end=\"1989-12-31\", value=100),     list(start=\"1990-01-01\", end=\"1999-12-31\", value=-10),     list(start=\"2000-01-01\", end=\"2002-12-31\", value=50)) cal<-calendarization(obs, 4, end=\"2003-12-31\", stde=TRUE) Q<-cal$rslt eQ<-cal$erslt"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cholette.html","id":null,"dir":"Reference","previous_headings":"","what":"Cholette method — cholette","title":"Cholette method — cholette","text":"Benchmarking means Cholette method.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cholette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cholette method — cholette","text":"","code":"cholette(   s,   t,   rho = 1,   lambda = 1,   bias = \"None\",   conversion = \"Sum\",   obsposition = 1 )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cholette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cholette method — cholette","text":"s Disaggregated series. Mandatory t Aggregation constraint. Mandatory obsposition Postion observation aggregated period (used \"UserDefined\" conversion)","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cholette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cholette method — cholette","text":"$$\\sum_{,t}\\left(\\left(\\frac{{x_{,t}-z}_{,t}}{\\left|z_{,t}\\right|^\\lambda}\\right)-\\rho\\left(\\frac{{x_{,t-1}-z}_{,t-1}}{\\left|z_{,t-1}\\right|^\\lambda}\\right)\\right)^2$$","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cubicspline.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking by means of cubic splines — cubicspline","title":"Benchmarking by means of cubic splines — cubicspline","text":"Cubic splines piecewise cubic functions linked together way guarantee smoothness data points. Additivity constraints added benchmarking purpose sub-period estimates derived spline. sub-period indicator (disaggregated series) used, cubic splines longer drawn based low frequency data Benchmark--Indicator (BI ratio) one smoothed. Sub- period estimates simply product smoothed high frequency BI ratio indicator.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cubicspline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking by means of cubic splines — cubicspline","text":"","code":"cubicspline(   s = NULL,   t,   nfreq = 4,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1 )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cubicspline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking by means of cubic splines — cubicspline","text":"s Disaggregated series. NULL, must class t. t Aggregation constraint. Mandatory. must either object class ts numeric vector. nfreq Annual frequency disaggregated variable. Used disaggregated series provided. conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. obsposition Postion observation aggregated period (used \"UserDefined\" conversion)","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/cubicspline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking by means of cubic splines — cubicspline","text":"","code":"data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1))  # cubic spline without disaggregated series y1<-rjd3bench::cubicspline(t=Y, nfreq=4)  # cubic spline with disaggregated series x1<-y1+rnorm(n=length(y1), mean=0, sd=10) y2<-rjd3bench::cubicspline(s=x1, t=Y)  # cubic splines used for temporal disaggregation x2<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) y3<-rjd3bench::cubicspline(s=x2, t=Y)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking by means of the Denton method. — denton","title":"Benchmarking by means of the Denton method. — denton","text":"Denton method relies principle movement preservation. exist variants corresponding different definitions movement preservation: additive first difference (AFD), proportional first difference (PFD), additive second difference (ASD), proportional second difference (PSD), etc. default widely adopted Denton PFD method.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking by means of the Denton method. — denton","text":"","code":"denton(   s = NULL,   t,   d = 1,   mul = TRUE,   nfreq = 4,   modified = TRUE,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1 )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking by means of the Denton method. — denton","text":"s Disaggregated series. NULL, must class t. t Aggregation constraint. Mandatory. must either object class ts numeric vector. d Differencing order. 1 default mul Multiplicative additive benchmarking. Multiplicative default nfreq Annual frequency disaggregated variable. Used disaggregated series provided. modified Modified (TRUE) unmodified (FALSE) Denton. Modified default conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. obsposition Position observation aggregated period (used \"UserDefined\" conversion)","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmarking by means of the Denton method. — denton","text":"benchmarked series returned","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking by means of the Denton method. — denton","text":"","code":"Y<-ts(qna_data$B1G_Y_data$B1G_FF, frequency=1, start=c(2009,1))  # denton PFD without high frequency series y1<-rjd3bench::denton(t=Y, nfreq=4)  # denton ASD x1<-y1+rnorm(n=length(y1), mean=0, sd=10) y2<-rjd3bench::denton(s=x1, t=Y, d=2, mul=FALSE)  # denton PFD used for temporal disaggregation x2 <- ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) y3<-rjd3bench::denton(s=x2, t=Y)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton_modelbased.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"Denton proportional method can expressed statistical model State space representation (see documentation definition states). approach interesting allows flexibility model inclusion outliers (level shift Benchmark Indicator ratio) otherwise induce unintended wave effects standard Denton method. Outliers intensity defined changing value 'innovation variances'.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton_modelbased.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"","code":"denton_modelbased(   series,   indicator,   differencing = 1,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   outliers = NULL,   fixedBIratios = NULL )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton_modelbased.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"series Aggregation constraint. Mandatory. must either object class ts numeric vector. indicator High-frequency indicator. Mandatory. must class series differencing implemented yet. Keep equals 1 (Denton PFD method). conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. conversion.obsposition Position observation aggregated period (used \"UserDefined\" conversion) outliers list structured definition outlier periods intensity. period must submitted first format YYYY-MM-DD enclosed quotation marks. must followed equal sign intensity outlier, defined relative value 'innovation variances' (1= normal situation) fixedBIratios list structured definition periods BI ratios must fixed. period must  submitted first format YYYY-MM-DD enclosed quotation marks. must followed  equal sign value BI ratio.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton_modelbased.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"object class 'JD3MBDenton'","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/denton_modelbased.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"","code":"# retail data, monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x, outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) y<-td$estimation$edisagg  # qna data, quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1))  td1<-rjd3bench::denton_modelbased(Y, x) td2<-rjd3bench::denton_modelbased(Y, x, outliers=list(\"2020-04-01\"=100), fixedBIratios=list(\"2021-04-01\"=39.0))  bi1<-td1$estimation$biratio bi2<-td2$estimation$biratio y1<-td1$estimation$disagg y2<-td2$estimation$disagg if (FALSE) { ts.plot(bi1,bi2,gpars=list(col=c(\"red\",\"blue\"))) ts.plot(y1,y2,gpars=list(col=c(\"red\",\"blue\"))) }"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking following the growth rate preservation principle. — grp","title":"Benchmarking following the growth rate preservation principle. — grp","text":"method corresponds method Cauley Trager, using solution proposed Di Fonzo Marini.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking following the growth rate preservation principle. — grp","text":"","code":"grp(   s,   t,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1,   eps = 1e-12,   iter = 500,   denton = TRUE )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking following the growth rate preservation principle. — grp","text":"s Disaggregated series. Mandatory. must ts object. t Aggregation constraint. Mandatory. must ts object. conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. obsposition Postion observation aggregated period (used \"UserDefined\" conversion) denton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking following the growth rate preservation principle. — grp","text":"","code":"data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) y<-rjd3bench::grp(s=x, t=Y)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/multivariatecholette.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-variate Cholette — multivariatecholette","title":"Multi-variate Cholette — multivariatecholette","text":"Multi-variate Cholette","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/multivariatecholette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-variate Cholette — multivariatecholette","text":"","code":"multivariatecholette(   xlist,   tcvector = NULL,   ccvector = NULL,   rho = 1,   lambda = 1 )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/multivariatecholette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-variate Cholette — multivariatecholette","text":"lambda","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"Plot function object class JD3AdlDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"","code":"# S3 method for JD3AdlDisagg plot(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"x object class JD3AdlDisagg ... arguments pass ts.plot.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x, xar=\"FREE\") #> Warning: NaNs produced plot(td)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"Plot function object class JD3MBDenton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"","code":"# S3 method for JD3MBDenton plot(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"x object class JD3MBDenton ... arguments pass ts.plot.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) plot(td)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"Plot function object class JD3TempDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"","code":"# S3 method for JD3TempDisagg plot(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"x object class JD3TempDisagg ... arguments pass ts.plot.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) plot(td)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"Plot function object class JD3TempDisaggI","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"","code":"# S3 method for JD3TempDisaggI plot(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"x object class JD3TempDisaggI ... arguments pass ts.plot.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) plot(td)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"Print function object class JD3AdlDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"","code":"# S3 method for JD3AdlDisagg print(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"x object class JD3AdlDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x, xar=\"FREE\") #> Warning: NaNs produced print(td) #> Model: FREE  #>          coef       se         t #> 1 -1542.99264 1208.321 -1.276972 #> 2    15.74617      NaN       NaN #> 3   -15.59888      NaN       NaN #>  #> Use summary() for more details.  #> Use plot() to see the decomposition of the disaggregated series."},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3MBDenton — print.JD3MBDenton","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"Print function object class JD3MBDenton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"","code":"# S3 method for JD3MBDenton print(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"x object class JD3MBDenton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x, outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) print(td) #> Available estimates: #> [1] \"disagg\"   \"edisagg\"  \"biratio\"  \"ebiratio\" #>  #> Use summary() for more details.  #> Use plot() to see the disaggregated series and BI ratio together with their respective confidence interval"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"Print function object class JD3TempDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"","code":"# S3 method for JD3TempDisagg print(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"x object class JD3TempDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) print(td) #> Model: Ar1  #>               coef           se         t #> C    -1.381950e+05 53302.135401 -2.592672 #> var1  9.878368e+00     1.334654  7.401446 #>  #> Use summary() for more details.  #> Use plot() to see the decomposition of the disaggregated series."},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"Print function object class JD3TempDisaggI","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"","code":"# S3 method for JD3TempDisaggI print(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"x object class JD3TempDisaggI","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) print(td) #>         coef #> a 26898.3587 #> b     0.0542 #>  #> Use summary() for more details.  #> Use plot() to visualize the disaggregated series."},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"Summary function object class JD3AdlDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"","code":"# S3 method for JD3AdlDisagg summary(object, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"object object class JD3AdlDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x) #> Warning: NaNs produced summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  2  #> LogLikelihood:  -211.6667  #> Standard error:   #> AIC:  427.3333  #> BIC:  428.8785  #>  #>  #> Model: FREE  #> Rho : 0.98097  ( 0.01414316 ) #>  #>  #> Regression model  #>          coef       se         t #> 1 -1542.99264 1208.321 -1.276972 #> 2    15.74617      NaN       NaN #> 3   -15.59888      NaN       NaN"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"Summary function object class JD3MBDenton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"","code":"# S3 method for JD3MBDenton summary(object, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"object object class JD3MBDenton","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x, outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  -1  #> Number of effective observations:  -1  #> Number of estimated parameters:  -1  #> Standard error:   #> AIC:  NaN  #> BIC:  NaN  #>  #>  #> Available estimates: #> [1] \"disagg\"   \"edisagg\"  \"biratio\"  \"ebiratio\""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"Summary function object class JD3TempDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"","code":"# S3 method for JD3TempDisagg summary(object, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"object object class JD3TempDisagg","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  3  #> LogLikelihood:  -246.6473  #> Standard error:   #> AIC:  499.2945  #> BIC:  502.1278  #>  #>  #> Model: Ar1  #> Rho : 0.9809129  ( NaN ) #>  #>  #> Regression model  #>               coef           se         t #> C    -1.381950e+05 53302.135401 -2.592672 #> var1  9.878368e+00     1.334654  7.401446"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"Summary function object class JD3TempDisaggI","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"","code":"# S3 method for JD3TempDisaggI summary(object, ...)"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"object object class JD3TempDisaggI","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  4  #> LogLikelihood:  -189.6422  #> Standard error:   #> AIC:  387.2844  #> BIC:  390.8459  #>  #>  #> Model:  #>         coef #> a 26898.3587 #> b     0.0542"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"Perform temporal disaggregation low frequency high frequency time series regression models. Models included Chow-Lin, Fernandez, Litterman variants algorithms.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"","code":"temporaldisaggregation(   series,   constant = TRUE,   trend = FALSE,   indicators = NULL,   model = c(\"Ar1\", \"Rw\", \"RwAr1\"),   freq = 4,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   rho = 0,   rho.fixed = FALSE,   rho.truncated = 0,   zeroinitialization = FALSE,   diffuse.algorithm = c(\"SqrtDiffuse\", \"Diffuse\", \"Augmented\"),   diffuse.regressors = FALSE )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"series time series disaggregated. must ts object. constant Constant term (T/F). used Ar1 model zeroinitialization=F trend Linear trend (T/F) indicators High-frequency indicator(s) used temporal disaggregation. must (list ) ts object(s). model Model error term (disaggregated level). \"Ar1\" = Chow-Lin, \"Rw\" = Fernandez, \"RwAr1\" = Litterman freq Annual frequency disaggregated variable. Used indicator provided conversion Conversion mode (Usually \"Sum\" \"Average\") conversion.obsposition used \"UserDefined\" mode. Position observed indicator aggregated periods (instance 7th month year) rho used Ar1/RwAr1 models. (Initial) value parameter rho.fixed Fixed rho (T/F, F default) rho.truncated Range Rho evaluation ([rho.truncated, 1[) zeroinitialization initial values auto-regressive model fixed 0 (T/F, F default) diffuse.algorithm Algorithm used diffuse initialization. \"SqrtDiffuse\" default diffuse.regressors Indicates coefficients regression model diffuse (T) fixed unknown (F, default)","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"object class \"JD3TempDisagg\"","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"","code":"# retail data, chow-lin with monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicators=x) y<-td$estimation$disagg  # qna data, fernandez with/without quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) td1<-rjd3bench::temporaldisaggregation(Y, indicators=x, model = \"Rw\") td2<-rjd3bench::temporaldisaggregation(Y, model = \"Rw\") mod1<- td1$regression$model"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"Temporal disaggregation using model: x(t) = + b y(t), x(t) indicator, y(t) unknown target series, low-frequency constraints y.","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"","code":"temporaldisaggregationI(   series,   indicator,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   rho = 0,   rho.fixed = FALSE,   rho.truncated = 0 )"},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"series time series disaggregated. must ts object. indicator High-frequency indicator used temporal disaggregation. must ts object. conversion Conversion mode (Usually \"Sum\" \"Average\") conversion.obsposition used \"UserDefined\" mode. Position observed indicator aggregated periods (instance 7th month year) rho used Ar1/RwAr1 models. (Initial) value parameter rho.fixed Fixed rho (T/F, F default) rho.truncated Range Rho evaluation ([rho.truncated, 1[)","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"object class \"JD3TempDisaggI\"","code":""},{"path":"https://rjdemetra.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"","code":"# retail data, monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) y<-td$estimation$disagg  # qna data, quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_CE\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_CE\"], frequency=4, start=c(2009,1)) td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) a<-td$regression$a b<-td$regression$b"}]
